#!/usr/binenv python
# -*- coding: utf-8 -*-
#################################################################################
#
#    (DC)Â² - DataCenter Deployment Control
#    Copyright (C) 2010, 2011, 2012, 2013  Stephan Adig <sh@sourcecode.de>
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#################################################################################

import sys
import os
import os.path
import types
from optparse import OptionParser, OptionGroup
try:
    from dc2.client.api.dc2 import Servers
    from dc2.client.api.dc2 import Hosts
    from dc2.client.api.dc2 import Environments
    from dc2.client.api.dc2 import InstallState
    from dc2.client.api.dc2 import ServerInventory
    from dc2.client.api.dc2 import Utilities
    from dc2.client.api.dc2 import SystemUser
    from dc2.client.api.dc2 import SystemGroups
    from dc2.client.api.dc2.addons.freeipa import FreeIPA
except ImportError:
    a = sys.path
    b = []
    b.append("../")
    sys.path = b + a
    from dc2.client.api.dc2 import Servers
    from dc2.client.api.dc2 import Hosts
    from dc2.client.api.dc2 import Environments
    from dc2.client.api.dc2 import InstallState
    from dc2.client.api.dc2 import ServerInventory
    from dc2.client.api.dc2 import Utilities
    from dc2.client.api.dc2 import SystemUser
    from dc2.client.api.dc2 import SystemGroups
    from dc2.client.api.dc2.addons.freeipa import FreeIPA

def do_server_find(options):
    if options.server_find_argument is not None and options.server_find_value is not None and options.server_output_value is not None:
        if options.server_output_value in ("_id", "uuid", "serial_no", "manufacturer", "product_name", "location", "asset_tags"):
            if options.server_find_argument in ('mac', 'serial'):
                s = Servers(options.dc2_backend_url)
                server = None
                if options.server_find_argument == "mac":
                    server = s.find_by_mac(options.server_find_value)
                if options.server_find_argument == "serial":
                    server = s.find_by_serial_no(options.server_find_value)
                if server is not None and server.has_key(options.server_output_value):
                    print server[options.server_output_value]
                    sys.exit(0)
    return None


def do_host_find(options):
    if options.host_find_argument is not None and options.host_find_value is not None and options.host_output_value is not None:
        if options.host_output_value in ("_id", "server_id", "hostname", "domainname", "hostclasses", "environments", 'ipa_otp'):
            if options.host_find_argument in ('mac', 'serial', "hostname+domainname"):
                h = Hosts(options.dc2_backend_url)
                host = None
                if options.host_find_argument == "mac":
                    host = h.find_by_server_mac(options.host_find_value)
                if options.host_find_argument == "serial":
                    host = h.find_by_server_serial(options.host_find_value)
                if options.host_find_argument == "hostname+domainname":
                    hostname = options.host_find_value.split(".", 1)[0]
                    domainname = options.host_find_value.split(".", 1)[1]
                    host = h.find_by_hostname(hostname, domainname)
                if host is not None and options.host_output_network_config is not None:
                    if options.host_output_network_config != "" :
                        h.write_network_config(options.host_output_network_config, host)
                        sys.exit(0)
                if host is not None and host.has_key(options.host_output_value):
                    if type(host[options.host_output_value]) is types.ListType:
                        sort_list = sorted(host[options.host_output_value])
                        print " ".join(sort_list)
                        sys.exit(0)
                    else:
                        print host[options.host_output_value]
                        sys.exit(0)


    return None



def convert_to_dict(list_of_vars=None):
    if list_of_vars is not None:
        vars = {}
        for entry in list_of_vars:
            vars[entry["name"]] = entry["value"]
        return vars
    return None

def do_environment_find(options):
    if options.environment_find_value is not None and options.environment_variable_value is not None:
        e = Environments(options.dc2_backend_url)
        environment = e.find_by_name(options.environment_find_value)
        if environment is not None:
            if environment.has_key("variables") and type(environment["variables"]) is types.ListType:
                var_dict = convert_to_dict(environment["variables"])
                if var_dict.has_key(options.environment_variable_value):
                    print var_dict[options.environment_variable_value]
                    sys.exit(0)
    return None

def do_installstate_find(options):
    if options.installstate_find_argument is not None and options.installstate_find_value is not None:
        i = InstallState(options.dc2_backend_url)
        if options.installstate_find_argument == "mac":
            s = Servers(options.dc2_backend_url)
            server = s.find_by_mac(options.installstate_find_value)
            options.installstate_find_value = server["serial_no"]
            if (options.installstate_update_status is not None and \
                options.installstate_update_status != "") or \
                (options.installstate_update_progress is not None and \
                options.installstate_update_progress != ""):
                if options.installstate_update_status is not None and options.installstate_update_status != "":
                    installstate_rec = i.find_status_by_server(options.installstate_find_value)
                    if installstate_rec is not None:
                        i.update_status_by_server(options.installstate_find_value, options.installstate_update_status, installstate_rec["progress"])
                if options.installstate_update_progress is not None and options.installstate_update_progress != "":
                    installstate_rec = i.find_status_by_server(options.installstate_find_value)
                    if installstate_rec is not None:
                        i.update_status_by_server(options.installstate_find_value, installstate_rec["status"], options.installstate_update_progress)
                sys.exit(0)
        if options.installstate_find_argument == "serial":
            if (options.installstate_update_status is not None and \
                options.installstate_update_status != "") or \
                (options.installstate_update_progress is not None and \
                options.installstate_update_progress != ""):
                if options.installstate_update_status is not None and options.installstate_update_status != "":
                    installstate_rec = i.find_status_by_server(options.installstate_find_value)
                    if installstate_rec is not None:
                        i.update_status_by_server(options.installstate_find_value, options.installstate_update_status, installstate_rec["progress"])
                if options.installstate_update_progress is not None and options.installstate_update_progress != "":
                    installstate_rec = i.find_status_by_server(options.installstate_find_value)
                    if installstate_rec is not None:
                        i.update_status_by_server(options.installstate_find_value, installstate_rec["status"], options.installstate_update_progress)
                sys.exit(0)
        if options.installstate_find_argument == "host":
            if (options.installstate_update_status is not None and \
                options.installstate_update_status != "") or \
                (options.installstate_update_progress is not None and \
                options.installstate_update_progress != ""):
                hostname = options.installstate_find_value.split(".", 1)[0]
                domainname = options.installstate_find_value.split(".", 1)[1]
                if options.installstate_update_status is not None and options.installstate_update_status != "":
                    installstate_rec = i.find_status_by_host(hostname, domainname)
                    if installstate_rec is not None:
                        i.update_status_by_host(hostname, domainname, options.installstate_update_status, installstate_rec["progress"])
                if options.installstate_update_progress is not None and options.installstate_update_progress != "":
                    installstate_rec = i.find_status_by_host(hostname, domainname)
                    if installstate_rec is not None:
                        i.update_status_by_host(hostname, domainname, installstate_rec["status"], options.installstate_update_progress)

                sys.exit(0)
    return None

def do_inventory(options):
    if options.do_inventory:
        s = ServerInventory(options.dc2_backend_url)
        s.doInventory()
        sys.exit(0)


def do_utils(options):
    if options.do_utils:
        if options.utils_do_udev_file is not None and options.utils_do_udev_file != "":
            if options.utils_mac_addr is not None and options.utils_mac_addr != "":
                u = Utilities(options.dc2_backend_url)
                udev_file = u.get_udev_rule_file_by_mac(options.utils_mac_addr)
                fp = open(options.utils_do_udev_file, "wb")
                fp.write(udev_file)
                fp.close()
                return True
    return None

def do_systemuser(options):
    if options.is_systemuser:
        if options.systemusers_all:
            sysuser = SystemUser(options.dc2_backend_url)
            sysuser.create_all_users()
        if options.systemgroups_all:
            sysgroups = SystemGroups(options.dc2_backend_url)
            sysgroups.create_all_groups()

def do_freeipa(options):
    if options.is_freeipa:
        if options.freeipa_reset_otp_fqdn is not None:
            freeipa = FreeIPA(options.dc2_backend_url)
            result = freeipa.remove_otp(options.freeipa_reset_otp_fqdn)
            return result
    return False


def main():
    parser = OptionParser(add_help_option=False)
    parser.add_option('', '--help',
                      action='help',
                      help="Show this help")
    parser.add_option('-s', '--server',
                      action="store_true",
                      dest="is_server",
                      help="All commands are server related",
                      default=False)
    parser.add_option('-h', '--host',
                      action="store_true",
                      dest="is_host",
                      help="All commands are host related",
                      default=False)
    parser.add_option('-f', '--freeipa',
                      action='store_true',
                      dest='is_freeipa',
                      help='All Commands are FreeIPA related')
    parser.add_option('-e', '--environment',
                       action="store_true",
                       dest="is_environment",
                       help="All options are environment related",
                       default=False)
    parser.add_option('-i', '--installstatus',
                      action="store_true",
                      dest="is_installstate",
                      help="All Options are installstate related",
                      default=False)
    parser.add_option('-u', '--utilities',
                       action="store_true",
                       dest="do_utils",
                       help="All following options are now utilities related",
                       default=False)
    parser.add_option('', '--systemusers',
                      action="store_true",
                      dest="is_systemuser",
                      help="All following options are systemuser related",
                      default=False)
    parser.add_option('', '--do-inventory',
                      action="store_true",
                      dest='do_inventory',
                      help="Do the inventory, for unknown servers",
                      default=False)
    parser.add_option("", '--dc2-backend-url',
                      action="store",
                      dest="dc2_backend_url",
                      metavar="<url to your dc2 backend server>",
                      help="DC2 Backend URL (e.g. http://dc2db.domain.tld/RPC)",
                      default=None)
    freeipaGroup = OptionGroup(parser, 'FreeIPA Related Options')
    freeipaGroup.add_option('', '--reset-otp',
                            action='store',
                            type='string',
                            dest='freeipa_reset_otp_fqdn',
                            default=None,
                            metavar='FQDN',
                            help='reset OTP from FQDN')
    serverGroup = OptionGroup(parser, "Server Related Options")
    serverGroup.add_option("", '--server-find',
                           action="store",
                           type="string",
                           dest="server_find_argument",
                           default=None,
                           metavar="[mac,serial]",
                           help="Find a server by MACs or serial numbers")
    serverGroup.add_option("", '--server-find-value',
                           action="store",
                           type="string",
                           dest="server_find_value",
                           default=None,
                           help="Value for --server-find")

    serverGroup.add_option("", "--server-output-value",
                           action="store",
                           type="string",
                           dest="server_output_value",
                           default="server_id",
                           metavar="<key of server record>",
                           help="Output the server value <key of server record>")

    hostGroup = OptionGroup(parser, "Host Related Options")
    hostGroup.add_option("", '--host-find',
                           action="store",
                           type="string",
                           dest="host_find_argument",
                           default=None,
                           metavar="[mac,serial,hostname+domainname]",
                           help="Find a host by MACs or server serial numbers or host+domainname")
    hostGroup.add_option("", '--host-find-value',
                           action="store",
                           type="string",
                           dest="host_find_value",
                           default=None,
                           help="Value for --host-find")
    hostGroup.add_option("", "--host-output-value",
                           action="store",
                           type="string",
                           dest="host_output_value",
                           default="server_id",
                           metavar="<key of server record>",
                           help="Output the server value <key of server record>")
    hostGroup.add_option("", "--host-output-network-configuration",
                            action="store",
                            type="string",
                            dest="host_output_network_config",
                            metavar="TYPE",
                            help="Write network configuration of type [debian,redhat]",
                            default=None)
    environmentGroup = OptionGroup(parser, "Environment Related Options")
    environmentGroup.add_option("", '--environment-find',
                                action="store",
                                type="string",
                                dest="environment_find_value",
                                default=None,
                                metavar="NAME",
                                help="Find an environment by NAME")
    environmentGroup.add_option("", "--environment-variable",
                                action="store",
                                type="string",
                                dest="environment_variable_value",
                                metavar="NAME",
                                default=None,
                                help="Print the value of the variable NAME")
    installstateGroup = OptionGroup(parser, 'Install Status Related Options')
    installstateGroup.add_option("", '--installstatus-find',
                                  action="store",
                                  type="string",
                                  default=None,
                                  metavar="[mac,serial,host]",
                                  dest="installstate_find_argument",
                                  help="How to find the install status by server or host")
    installstateGroup.add_option("", '--installstatus-find-value',
                                 action="store",
                                 type="string",
                                 default=None,
                                 metavar="[server serial number, host+domainname]",
                                 dest="installstate_find_value",
                                 help="Find the server with serial number or the host with host+domainname")
    installstateGroup.add_option("", '--installstatus-update-status',
                                 action="store",
                                 default=None,
                                 metavar="[localboot,deploy]",
                                 dest="installstate_update_status",
                                 help="Update Install Status for host or server")
    installstateGroup.add_option("", '--installstatus-update-progress',
                                 action="store",
                                 type="string",
                                 default=None,
                                 metavar="[None,PXEBoot,Deployment]",
                                 dest="installstate_update_progress",
                                 help="Update Install Progress for host or server")

    utilitiesGroup = OptionGroup(parser, "Utilities Related Options")
    utilitiesGroup.add_option('', '--write-udev-rules-file',
                              action="store",
                              dest="utils_do_udev_file",
                              metavar="FILENAME",
                              help="Write udev rules file to FILE",
                              default=None)
    utilitiesGroup.add_option('', '--utils-find-mac',
                              action="store",
                              dest="utils_mac_addr",
                              metavar="MAC ADDR",
                              help="Set MAC address for finding servers udev file",
                              default=None)

    systemuserGroup = OptionGroup(parser, "OS User Related Options")
    systemuserGroup.add_option('', '--add-all-users',
                               action="store_true",
                               dest="systemusers_all",
                               help="Generate all system users",
                               default=False)
    systemuserGroup.add_option('', '--add-all-groups',
            action="store_true",
            dest="systemgroups_all",
            help="Generate all system groups",
            default=False)


    parser.add_option_group(serverGroup)
    parser.add_option_group(hostGroup)
    parser.add_option_group(environmentGroup)
    parser.add_option_group(installstateGroup)
    parser.add_option_group(utilitiesGroup)
    parser.add_option_group(systemuserGroup)
    (options, args) = parser.parse_args()
    result = True
    if (options.is_host and options.is_server) or \
        (options.is_host and options.is_installstate) or \
        (options.is_host and options.is_environment) or \
        (options.is_host and options.do_inventory) or \
        (options.is_host and options.do_utils) or \
        (options.is_host and options.is_freeipa) or \
        (options.is_server and options.is_installstate) or \
        (options.is_server and options.is_environment) or \
        (options.is_server and options.do_inventory) or \
        (options.is_server and options.do_utils) or \
        (options.is_server and options.is_freeipa) or \
        (options.is_installstate and options.is_environment) or \
        (options.is_installstate and options.do_inventory) or \
        (options.is_installstate and options.do_utils) or \
        (options.is_installstate and options.is_freeipa) or \
        (options.is_environment and options.do_inventory) or \
        (options.is_environment and options.do_utils) or \
        (options.is_environment and options.is_freeipa) or \
        (options.is_systemuser and options.is_host) or \
        (options.is_systemuser and options.is_server) or \
        (options.is_systemuser and options.is_environment) or \
        (options.is_systemuser and options.is_installstate) or \
        (options.is_systemuser and options.do_inventory) or \
        (options.is_systemuser and options.do_utils) or \
        (options.is_systemuser and options.is_freeipa):

        print "You can only select one of server or host or environment related commands"
        sys.exit(1)
    if options.dc2_backend_url is None:
        print "You need to set the backend url"
        sys.exit(1)
    if options.do_inventory:
        result = do_inventory(options)
    if options.is_server:
        result = do_server_find(options)
    if options.is_host:
        result = do_host_find(options)
    if options.is_environment:
        result = do_environment_find(options)
    if options.is_installstate:
        result = do_installstate_find(options)
    if options.do_utils:
        result = do_utils(options)
    if options.is_systemuser:
        result = do_systemuser(options)
    if options.is_freeipa:
        result = do_freeipa(options)
    if result is None:
        sys.exit(1)


if __name__ == "__main__":
    main()
