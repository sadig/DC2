#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os
import os.path
import xmlrpclib
from optparse import OptionParser, OptionGroup

def add_inventory_options(options=None,xmlrpc_server=None):
    if options is not None and xmlrpc_server is not None:
        env_list=[]
        env_list=xmlrpc_server.dc2.configuration.environments.find({"name":"INVENTORY"})
        if env_list is not None and len(env_list)>0:
            pass
        else:
            env_inventory={}
            env_inventory["name"]="INVENTORY"
            env_inventory["description"]="Default environment for the Inventory Job"
            env_inventory["variables"]=[]
            if options.dc2_kernel_filename is not None and options.dc2_kernel_filename != "":
                env_inventory["variables"].append({"name":"LINUX_KERNEL_NAME","value":"%s" % options.dc2_kernel_filename})
            else:
                env_inventory["variables"].append({"name":"LINUX_KERNEL_NAME","value":"vmlinuz"})
            if options.dc2_initrd_filename is not None and options.dc2_initrd_filename != "":
                env_inventory["variables"].append({"name":"LINUX_INITRD_NAME","value":"%s" % options.dc2_initrd_filename})
            else:
                env_inventory["variables"].append({"name":"LINUX_INITRD_NAME","value":"initrd.img"})
            if options.fai_nfsroot is not None and options.fai_nfsroot != "":
                env_inventory["variables"].append({"name":"FAI_NFSROOT","value":"%s" % options.fai_nfsroot})
            else:
                env_inventory["variables"].append({"name":"FAI_NFSROOT","value":"/srv/fai/nfsroot"})
            if options.dc2_backend_url is not None and options.dc2_backend_url != "":
                env_inventory["variables"].append({"name":"DC2_BACKEND_URL","value":"%s" % options.dc2_backend_url})
            else:
                env_inventory["variables"].append({"name":"DC2_BACKEND_URL","value":"http://localhost/RPC"})
            xmlrpc_server.dc2.configuration.environments.add(env_inventory)
            add_default_classes(options,xmlrpc_server)


def add_default_classes(options=None,xmlrpc_server=None):
    if options is not None and xmlrpc_server is not None:
        defclasses=[
                "10_ARCH_x86_64",
                "20_BOOT_GRUB_PC",
                "30_DISK_SIMPLE_10G_EXT2",
                "30_DISK_SIMPLE_10G_EXT3",
                "30_DISK_SIMPLE_10G_EXT4",
                "30_DISK_SIMPLE_10G_XFS",
                "50_OS_UBUNTU_1004",
                "50_OS_UBUNTU_1204",
                "60_SW_KUBUNTU_DESKTOP",
                "60_SW_UBUNTU_DESKTOP",
                "70_USERS"
                ]
        for cl in defclasses:
            xmlrpc_server.dc2.configuration.defaultclasses.add(cl)



if __name__=="__main__":
    parser=OptionParser()
    parser.add_option("","--kernel-filename",
            action="store",
            dest="dc2_kernel_filename",
            metavar="<kernel filename>",
            help="Kernel filename i.e. vmlinuz-3.2.0-15-generic",
            default=None)
    parser.add_option("","--initrd-filename",
            action="store",
            dest="dc2_initrd_filename",
            metavar="<initrd filename>",
            help="Initrd filename i.e. initrd.img-3.2.0-15-generic",
            default=None)
    parser.add_option("","--fai-nfsroot",
            action="store",
            dest="fai_nfsroot",
            metavar="<directory>",
            help="FAI NFSRoot directoryname",
            default=None)
    parser.add_option("","--dc2-backend-url",
            action="store",
            dest="dc2_backend_url",
            metavar="<url to your dc2 backend server>",
            help="DC2 Backend URL",
            default=None)
    (options,args)=parser.parse_args()
    if options.dc2_backend_url is not None and options.dc2_backend_url != "":
        s=xmlrpclib.ServerProxy("%s" % options.dc2_backend_url,allow_none=True)
        add_inventory_options(options,s)
    else:
        print "You need to set the DCÂ² backend url"
        sys.exit(1)

