#!/usr/bin/python
# -*- coding: utf-8 -*-
#################################################################################
#
#    (DC)Â² - DataCenter Deployment Control
#    Copyright (C) 2010, 2011, 2012  Stephan Adig <sh@sourcecode.de>
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#################################################################################
import sys
import os
import os.path
import argparse

DEFAULT_CONFIG_FILE='~/.dc2/dc2-cli.yaml'

try:
    from dc2.helpers.config import Configuration

def init_config(filename):
    configuration=Configuration(filename)
    return configuration

def instances(args):
    configuration=None
    if args.config_file is None:
        configuration=init_config(DEFAULT_CONFIG_FILE)
    else:
        configuration=init_config(args.config_file)



def servers(args):
    print args

def hosts(args):
    print args

if __name__ == '__main__':
    parser=argparse.ArgumentParser()
    parser.add_argument('-C','--config-file',dest='config_file',metavar='<filename>',default=None,help='Use %(metavar)s as configuration')
    parser.add_argument('--instance',metavar='<DC2 Instance>',default=None,help='Use DC2 Instance for quering')
    subparsers=parser.add_subparsers()

    instance_parser=subparsers.add_parser('instances')
    instance_group=instance_parser.add_mutually_exclusive_group()
    instance_group.add_argument('--list',action='store_true',default=False,help='List all DC2 instances')
    instance_parser.set_defaults(func=instances)

    server_parser=subparsers.add_parser('servers')
    server_group=server_parser.add_mutually_exclusive_group()
    server_group.add_argument('--find',choices=['serial','mac','asset-tag','location'],help='Find Server by %(choices)s',dest='serial_no')
    server_group.add_argument('--serverlist',action='store_true',default=False,help='List all servers')
    server_parser.add_argument('value',default=None,nargs='?')
    server_parser.set_defaults(func=servers)

    host_parser=subparsers.add_parser('hosts')
    host_group = host_parser.add_mutually_exclusive_group()
    host_group.add_argument('--hostlist',action='store_true',default=False,help='List all Hosts')
    host_group.add_argument('--find',choices=['fqdn','hostname','domainname'])
    host_parser.add_argument('value',default=None,nargs='?')
    host_parser.set_defaults(func=hosts)

    args=parser.parse_args()
    args.func(args)

